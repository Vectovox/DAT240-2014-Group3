modeltype WFE uses wfe('http://wfe/1.0');
modeltype PETRI uses petrinet('chalmers.se/cse/mde2014');

transformation Workflow_To_Petri(in wfe : WFE, out PETRI);

main() {
	var petri := wfe.rootObjects()[WFE::Workflow]->map wfe2petri();
}


mapping Workflow::wfe2petri() : PETRI::PetriNet {
	name := self.name;
	var transitions := self.contains_nodes.map node2transition(result); 
	var places := PETRI::Place.allInstances();
	
	nodes := transitions.oclAsType(PETRI::Node)->union(places->asSequence());
	
	places->forEach(place) {
		var wfeArc := place.invresolveoneIn(WFE::Arc::arc2place, WFE::Arc);
		var transition := wfeArc.source.resolveoneIn(WFE::Node::node2transition, PETRI::Transition);
		var newArc := new PETRI::Arc();
		newArc.source := transition;
		newArc.target := place;
		transition.outgoing += newArc;
		place.incoming += newArc
	};
	
	WFE::StartNode.allInstances()->forEach(startNode) {
		var startTransition := startNode.resolveoneIn(WFE::Node::node2transition, PETRI::Transition);
		var arc := new PETRI::Arc();
		var place := new PETRI::Place();
		
		startTransition.incoming += arc;
		arc.target := startTransition;
		place.outgoing += arc;
		arc.source := place;
		place.name := 'derStart';
		place.tokens += new PETRI::Token();
		
		nodes += place;  
	};
	
	WFE::EndNode.allInstances()->forEach(endNode) {
		var endTransition := endNode.resolveoneIn(WFE::Node::node2transition, PETRI::Transition);
		var arc := new PETRI::Arc();
		var place := new PETRI::Place();
		
		endTransition.outgoing += arc;
		arc.source := endTransition;
		place.incoming += arc;
		arc.target := place;
		place.name := 'This is the end.';
		
		nodes += place;
	};
	
	arcs := PETRI::Arc.allInstances(); 
}

mapping WFE::Node::node2transition(in petrinet : PETRI::PetriNet) : PETRI::Transition {
	net := petrinet;
	name := self.name;
	incoming := self.incoming.map incoming2arc(petrinet, self);
}

mapping WFE::Arc::incoming2arc(in petrinet : PETRI::PetriNet, in node : WFE::Node) : PETRI::Arc {
	net := petrinet;
	target := node.resolveoneIn(WFE::Node::node2transition, PETRI::Transition);
	source := self.map arc2place(petrinet, result); 	
}

mapping WFE::Arc::arc2place(in petrinet : PETRI::PetriNet, in arc : PETRI::Arc) : PETRI::Place {
	net := petrinet;
	outgoing += arc;
	name := self.name;
	 
}