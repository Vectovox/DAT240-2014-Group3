modeltype WFE uses wfe('http://wfe/1.0');
modeltype PETRI uses petrinet('chalmers.se/cse/mde2014');

transformation Workflow_To_Petri(in wfe : WFE, out PETRI);

main() {
	var petri := wfe.rootObjects()[WFE::Workflow]->map wfe2petri();
}


mapping Workflow::wfe2petri() : PETRI::PetriNet {
	name := self.name;
	nodes := self.has_resources.map resource2place(result); 
	var transitions := self.contains_nodes.map node2transition(result); 
	var places := PETRI::Place.allInstances();
	
	nodes += transitions.oclAsType(PETRI::Node)->union(places->asSequence());
	
	places->forEach(place) {
		var wfeArc := place.invresolveoneIn(WFE::Arc::arc2place, WFE::Arc);
		if(wfeArc <> null) then {
			var transition := wfeArc.source.resolveoneIn(WFE::Node::node2transition, PETRI::Transition);
			var newArc := new PETRI::Arc();
			newArc.net := result;
			newArc.source := transition;
			newArc.target := place;
			transition.outgoing += newArc;
			place.incoming += newArc	
		} endif;
	};
	
	WFE::StartNode.allInstances()->forEach(startNode) {
		var startTransition := startNode.resolveoneIn(WFE::Node::node2transition, PETRI::Transition);
		var arc := new PETRI::Arc();
		var place := new PETRI::Place();
		arc.net := result;
		startTransition.incoming += arc;
		arc.target := startTransition;
		place.outgoing += arc;
		arc.source := place;
		place.name := 'derStart';
		place.tokens += new PETRI::Token();
		
		nodes += place;  
	};
	
	WFE::EndNode.allInstances()->forEach(endNode) {
		var endTransition := endNode.resolveoneIn(WFE::Node::node2transition, PETRI::Transition);
		var arc := new PETRI::Arc();
		var place := new PETRI::Place();
		
		endTransition.outgoing += arc;
		arc.source := endTransition;
		place.incoming += arc;
		arc.target := place;
		place.name := 'This is the end.';
		
		nodes += place;
	};
	
	PETRI::Transition.allInstances()->forEach(transition){
		var v := transition.invresolveoneIn(WFE::Node::node2transition, WFE::Node);
		if v.oclIsKindOf(WFE::Synchbar) = false then {
			if(transition.incoming->size() > 1) then {
				var targetnode := transition.incoming->first().source;
				var first := true;
				transition.incoming->forEach(arc){
					if(first = false) then {
						var trans := new PETRI::Transition();
						trans.name := "looptrans";
						trans.seconds := 0;
						trans.net := result;
						trans.incoming += arc;
						arc.target := trans;
						var newarc := new PETRI::Arc();
						newarc.source := trans;
						newarc.target := targetnode;
						targetnode.incoming := targetnode.incoming->excluding(arc);
						trans.outgoing += arc;
						result.nodes += trans;
					}endif;
					first := false;
				};
			} endif;
		} endif;
	};
	
	arcs := PETRI::Arc.allInstances(); 
}

mapping WFE::Node::node2transition(in petrinet : PETRI::PetriNet) : PETRI::Transition {
	net := petrinet;
	name := self.name;
	if self.oclIsKindOf(WFE::Sleep) then {
		result.seconds := self->oclAsType(WFE::Sleep).seconds;
	} else {
		result.seconds := 0;
	} endif;
	
	incoming := self.incoming.map incoming2arc(petrinet, self);
	if(self.oclIsKindOf(WFE::Activity) and self.oclAsType(WFE::Activity).has_assigned->size() > 0) then {
		var inc := self.oclAsType(WFE::Activity).map hasAssignedResource2incomingArc(petrinet);
		incoming += inc;
		inc.source.outgoing += inc;
		var outg := self.oclAsType(WFE::Activity).map hasAssignedResource2outGoingArc(petrinet);
		outgoing += outg;
		outg.target.incoming += outg;
	} endif;
}

mapping WFE::Arc::incoming2arc(in petrinet : PETRI::PetriNet, in node : WFE::Node) : PETRI::Arc {
	net := petrinet;
	target := node.resolveoneIn(WFE::Node::node2transition, PETRI::Transition);
	source := self.map arc2place(petrinet, result); 	
}

mapping WFE::Arc::arc2place(in petrinet : PETRI::PetriNet, in arc : PETRI::Arc) : PETRI::Place {
	net := petrinet;
	outgoing += arc;
	name := self.name;
}

mapping WFE::Resource::resource2place(in petrinet : PETRI::PetriNet) : PETRI::Place {
	net := petrinet;
	name := self.name;	
	tokens += new PETRI::Token();
}

mapping WFE::Activity::hasAssignedResource2incomingArc(in petrinet : PETRI::PetriNet) : PETRI::Arc {
	net := petrinet;
	source := self.has_assigned.resolveoneIn(WFE::Resource::resource2place, PETRI::Place); // Place/Resource
	target := self.resolveoneIn(WFE::Node::node2transition, PETRI::Transition); // Transistion/Activity
}

mapping WFE::Activity::hasAssignedResource2outGoingArc(in petrinet : PETRI::PetriNet) : PETRI::Arc {
	net := petrinet;
	target := self.has_assigned.resolveoneIn(WFE::Resource::resource2place, PETRI::Place); // Place/Resource
	source := self.resolveoneIn(WFE::Node::node2transition, PETRI::Transition); // Transistion/Activity
}
